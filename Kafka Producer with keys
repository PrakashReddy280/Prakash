import java.util.Properties;
import java.util.concurrent.ExecutionException;

public class producerkeys {
            public static void main(String[] args) throws ExecutionException, InterruptedException {
                final Logger logger1 = LoggerFactory.getLogger(producerkeys.class);
                String bootstrap = "127.0.0.1:9092";
                Properties properties = new Properties();
                properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrap);
                properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
                properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

                KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);
                for (int i = 0; i < 10; i++) {
                    String topic="praki";
                    String value="CSK IPL 2020 Champs"+Integer.toString(i);
                    String key="key"+Integer.toString(i);
                    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic,key, value);
                    logger1.info("key"+key);
                    producer.send(record, new Callback() {
                        public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                            if (e == null) {
                                logger1.info("topic:" + recordMetadata.topic() + "\n" +
                                        "partitions:" + recordMetadata.partition() + "\n" +
                                        "offset:" + recordMetadata.offset() + "\n" +
                                        "timestamp:" + recordMetadata.timestamp());
                            } else {
                                logger1.error("error while message", e);
                            }
                        }
                    }).get();
                }
                producer.flush();
                producer.close();

    }
}
